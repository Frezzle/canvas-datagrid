{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f3cf93233867b7806fba","webpack:///canvas-datagrid.js","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","__webpack_require__","moduleId","installedModules","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","defaults","attributes","styles","component","Grid","args","isComponent","undefined","isChildGrid","parentNode","test","nodeType","intf","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","parentDOMNode","innerHTML","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","cachedImagesDrawn","draw","drawHtml","cell","img","v","formattedValue","cacheKey","toString","rowIndex","columnIndex","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","wrapText","splitChar","lines","value","calculatedLineHeight","word","elWidth","plWidth","clippedVal","previousLine","words","split","textHeight","wrap","cellWhiteSpace","et","ellipsisText","line","cHeight","paddedHeight","measureText","measure","paddedWidth","splice","originText","stepLength","direction","substr","drawText","fontHeight","lineHeight","vPos","hPos","paddingLeft","orderByArrowWidth","horizontalAlignment","paddingRight","verticalAlignment","paddingBottom","lineSpacing","offsetLeft","offsetTop","debug","active","font","debugFont","debugColor","stringify","pw","idx","idx_ord","sortColumnIndex","map","getFrozenColumnsWidth","column","getSchema","min","frozenColumn","hiddenFrozenColumnCount","hidden","getColummnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","cellBorderWidth","visibleRows","paddingTop","whiteSpace","cellLineHeight","cellLineSpacing","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","console","warn","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","scrollIndexLeft","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","gridBorderWidth","gridBorderColor","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","horizontalBoxVisible","context","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","verticalBoxVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","showPerformance","pop","perf","reduce","toFixed","perfDelta","frozenColumnsWidth","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","debugBackgroundColor","key","dpl","ph","px","py","debugPerfChartTextColor","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","apply","wheeling","stopPropagation","fn","events","removeEventListener","sfn","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","checkScrollBoxVisibility","dataWidth","overflowX","dataHeight","overflowY","setScrollBoxSize","setCanvasSize","dims","cellBorder","dim","appliedInlineStyles","parentNodeStyle","isComponet","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","ellipsisCache","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","sb","startingBounds","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","Number","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","colKey","substring","sel","cellData","colIndex","cName","getVisibleSchema","yi","getNextVisibleColumnIndex","visibleColumnIndex","getVisibleColumnIndexOf","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","headers","useHtml","hVal","join","addCellValue","trRow","textRow","outputHeaderKeys","tableRows","textRows","outputHeaders","sData","rowKeys","sSorted","setData","touchMove","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","touchScrollTimeout","rw","t1","t2","changedTouches","getTouchPos","touchDeadZone","touchContextTimeout","touchZoomSensitivity","touchZoomMin","touchZoomMax","zoomAltered","selectionScrollZone","calculatePPS","touchScrollStart","stopAnimation","animationFrames","touchSelecting","startingCell","touchSelect","touchMoving","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchingCell","editCell","touchstart","disposeContextMenu","touchStartEvent","touchStart1","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","handleType","bounds","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","orderings","add","sortFunction","col","sort","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","applyFilter","refreshFromOrigialData","getHeaderByName","applyDataTransforms","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","message","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","getVisibleCellByIndex","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","isRowVisible","isColumnVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","contextMenuHoverBackground","contextMenuHoverColor","display","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","contextMenuItemMargin","contextMenuItemBorderRadius","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","contextMenuCursor","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","offsetY","targetX","targetY","sbh","isColumnSelected","colIsSelected","shift","supressEvent","addCol","de","ri","st","dragObject","childGrid","trArgs","treeGridHeight","dontSetStorageData","sorter","xi","maxRowLength","minXi","lastSourceIndex","cidx","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","getRowHeight","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f3cf93233867b7806fba","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(2),\n  __webpack_require__(0),\n  __webpack_require__(3),\n  __webpack_require__(4),\n  __webpack_require__(5),\n  __webpack_require__(6),\n  __webpack_require__(7),\n  __webpack_require__(8),\n  __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n  'use strict';\n  component = component();\n  var modules = Array.prototype.slice.call(arguments);\n  function Grid(args) {\n    args = args || {};\n    var self = {};\n    self.isComponent = args.component === undefined;\n    self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n    if (self.isChildGrid) {\n      self.intf = {};\n    } else {\n      // self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n      // : document.createElement('canvas');\n      self.intf = self.isComponent ? null : document.createElement('canvas');\n    }\n    self.args = args;\n    self.intf.args = args;\n    self.applyComponentStyle = component.applyComponentStyle;\n    self.hyphenateProperty = component.hyphenateProperty;\n    self.dehyphenateProperty = component.dehyphenateProperty;\n    self.createGrid = function grid(args) {\n      args.component = false;\n      return new Grid(args);\n    };\n    modules.forEach(function (module) {\n      module(self);\n    });\n    if (self.isChildGrid) {\n      self.shadowRoot = args.parentNode.shadowRoot;\n      self.parentNode = args.parentNode;\n    } else if (self.intf.createShadowRoot) {\n      self.shadowRoot = self.intf.attachShadow({ mode: 'open' });\n      self.parentNode = self.shadowRoot;\n    } else {\n      self.parentNode = self.intf;\n    }\n    self.init();\n    return self.intf;\n  }\n  if (window.HTMLElement) {\n    Grid.prototype = Object.create(window.HTMLElement.prototype);\n  }\n  // export web component\n  if (window.customElements) {\n    Grid.observedAttributes = component.getObservableAttributes();\n    Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n    Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n    Grid.prototype.connectedCallback = component.connectedCallback;\n    Grid.prototype.adoptedCallback = component.adoptedCallback;\n    window.customElements.define('canvas-datagrid', Grid);\n  }\n  // export global\n  if (window && !window.canvasDatagrid && !window.require) {\n    window.canvasDatagrid = function (args) { return new Grid(args); };\n  }\n  // export amd loader\n  module.exports = function grid(args) {\n    args = args || {};\n    var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n      'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n    if (window.customElements && document.body.createShadowRoot) {\n      i = document.createElement('canvas-datagrid');\n      Object.keys(args).forEach(function (argKey) {\n        // set data and parentNode after everything else\n        if (argKey === 'data') { return; }\n        if (argKey === 'parentNode') { return; }\n        // top level keys in args\n        if (tKeys.indexOf(argKey) !== -1) {\n          tKeys.forEach(function (tKey) {\n            if (args[tKey] === undefined || tKey !== argKey) { return; }\n            if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n              if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                Object.keys(args[tKey]).forEach(function (sKey) {\n                  i[tKey][sKey] = args[tKey][sKey];\n                });\n              }\n            } else {\n              i[tKey] = args[tKey];\n            }\n          });\n          return;\n        }\n        // all others are attribute level keys\n        i.attributes[argKey] = args[argKey];\n      });\n      if (args.data) {\n        i.data = args.data;\n      }\n      // add to the dom very last to avoid redraws\n      if (args.parentNode) {\n        args.parentNode.appendChild(i);\n      }\n      return i;\n    }\n    args.component = false;\n    i = new Grid(args);\n    if (args.parentNode && args.parentNode.appendChild) {\n      args.parentNode.appendChild(i);\n    }\n    return i;\n  };\n  return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n  'use strict';\n  return function () {\n    var typeMap, component = {};\n    component.dehyphenateProperty = function hyphenateProperty(prop) {\n      prop = prop.replace('--cdg-', '');\n      var p = '', nextLetterCap;\n      Array.prototype.forEach.call(prop, function (char) {\n        if (nextLetterCap) {\n          nextLetterCap = false;\n          p += char.toUpperCase();\n          return;\n        }\n        if (char === '-') {\n          nextLetterCap = true;\n          return;\n        }\n        p += char;\n      });\n      return p;\n    };\n    component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n      var p = '';\n      Array.prototype.forEach.call(prop, function (char) {\n        if (char === char.toUpperCase()) {\n          p += '-' + char.toLowerCase();\n          return;\n        }\n        p += char;\n      });\n      return (cust ? '--cdg-' : '') + p;\n    };\n    function getDefaultItem(base, item) {\n      var i = {},\n        r;\n      defaults(i);\n      r = i.defaults[base].filter(function (i) {\n        return i[0].toLowerCase() === item.toLowerCase()\n          || component.hyphenateProperty(i[0]) === item.toLowerCase()\n          || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n      })[0];\n      return r;\n    }\n    component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n      if (!intf.isComponent) { return; }\n      var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n        defs = {};\n      intf.computedStyle = cStyle;\n      defaults(defs);\n      defs = defs.defaults.styles;\n      defs.forEach(function (def) {\n        var val;\n        val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n        if (val === \"\") {\n          val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n        }\n        if (val !== \"\" && typeof val === 'string') {\n          intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n            .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n        }\n      });\n      if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n        requestAnimationFrame(function () { intf.resize(true); });\n        intf.dispatchEvent('stylechanged', intf.style);\n      }\n    };\n    typeMap = {\n      data: function (strData) {\n        try {\n          return JSON.parse(strData);\n        } catch (e) {\n          throw new Error('Cannot read JSON data in canvas-datagrid data.');\n        }\n      },\n      schema: function (strSchema) {\n        try {\n          return JSON.parse(strSchema);\n        } catch (e) {\n          throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n        }\n      },\n      number: function (strNum, def) {\n        var n = parseInt(strNum, 10);\n        return isNaN(n) ? def : n;\n      },\n      boolean: function (strBool) {\n        return (/true/i).test(strBool);\n      },\n      string: function (str) {\n        return str;\n      }\n    };\n    component.getObservableAttributes = function () {\n      var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n      defaults(i);\n      i.defaults.attributes.forEach(function (attr) {\n        attrs.push(attr[0].toLowerCase());\n      });\n      return attrs;\n    };\n    component.disconnectedCallback = function () {\n      this.connected = false;\n    };\n    component.connectedCallback = function () {\n      var intf = this;\n      intf.parentDOMNode.innerHTML = \"\";\n      intf.parentDOMNode.appendChild(intf.canvas);\n      intf.connected = true;\n      component.observe(intf);\n      component.applyComponentStyle(true, intf);\n      intf.resize(true);\n    };\n    component.adoptedCallback = function () {\n      this.resize();\n    };\n    component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n      var tfn, intf = this, def;\n      if (attrName === 'style') {\n        component.applyComponentStyle(false, intf);\n        return;\n      }\n      if (attrName === 'data') {\n        if (intf.dataType === 'application/x-canvas-datagrid') {\n          intf.dataType = 'application/json+x-canvas-datagrid';\n        }\n        intf.args.data = newVal;\n        return;\n      }\n      if (attrName === 'schema') {\n        intf.args.schema = typeMap.schema(newVal);\n        return;\n      }\n      if (attrName === 'name') {\n        intf.name = newVal;\n        return;\n      }\n      if (attrName === 'class' || attrName === 'className') {\n        return;\n      }\n      def = getDefaultItem('attributes', attrName);\n      if (def) {\n        tfn = typeMap[typeof def[1]];\n        intf.attributes[def[0]] = tfn(newVal);\n        return;\n      }\n      if (/^on/.test(attrName)) {\n        intf.addEventListener('on' + attrName, function (e) {\n          // eval(newVal);\n        });\n      }\n      return;\n    };\n    component.observe = function (intf) {\n      var observer;\n      if (!window.MutationObserver) { return; }\n      intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n      /**\n       * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n       * @memberof canvasDatagrid\n       * @name applyComponentStyle\n       * @method\n       */\n      observer = new window.MutationObserver(function (mutations) {\n        var checkInnerHTML, checkStyle;\n        Array.prototype.forEach.call(mutations, function (mutation) {\n          if (mutation.attributeName === 'class'\n            || mutation.attributeName === 'style') {\n            checkStyle = true;\n            return;\n          }\n          if (mutation.target.nodeName === 'STYLE') {\n            checkStyle = true;\n            return;\n          }\n          if (mutation.target.parentNode\n            && mutation.target.parentNode.nodeName === 'STYLE') {\n            checkStyle = true;\n            return;\n          }\n          if (mutation.target === intf && (mutation.addedNodes.length > 0 || mutation.type === 'characterData')) {\n            checkInnerHTML = true;\n          }\n        });\n        if (checkStyle) {\n          intf.applyComponentStyle(false, intf);\n        }\n        if (checkInnerHTML) {\n          if (intf.dataType === 'application/x-canvas-datagrid') {\n            intf.dataType = 'application/json+x-canvas-datagrid';\n          }\n          intf.data = intf.innerHTML;\n        }\n      });\n      observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n      Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n        observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n      });\n    };\n    return component;\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e, cell: self.currentCell})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var ev = {NativeEvent: e, column: column};\n                        if(self.dispatchEvent('copyonschema', ev)) {\n                            column = ev.column;\n                        }\n\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.orderings = {\n            columns: [],\n            add: function (orderBy, orderDirection, sortFunction) {\n                self.orderings.columns = self.orderings.columns.filter(function (col) {\n                    return col.orderBy !== orderBy;\n                });\n                self.orderings.columns.push({\n                    orderBy: orderBy,\n                    orderDirection: orderDirection,\n                    sortFunction: sortFunction\n                });\n            },\n            sort: function () {\n                self.orderings.columns.forEach(function (col) {\n                    self.data.sort(col.sortFunction(col.orderBy, col.orderDirection));\n                });\n            }\n        };\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.visibleCells = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.applyFilter = function () {\n            self.refreshFromOrigialData();\n            Object.keys(self.columnFilters).forEach(function (filter) {\n                var header = self.getHeaderByName(filter);\n                if (!header) {\n                    return;\n                }\n                self.currentFilter = header.filter || self.filter(header.type || 'string');\n                self.data = self.data.filter(function (row) {\n                    return self.currentFilter(row[filter], self.columnFilters[filter]);\n                });\n            });\n            self.resize();\n            self.draw(true);\n        };\n        self.applyDataTransforms = function () {\n            self.applyFilter();\n            self.orderings.sort();\n        }\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentDOMNode', {\n            get: function () {\n                return self.parentDOMNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.'));\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                // apply filter, sort, etc to incoming dataset\n                self.applyDataTransforms();\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    if (self.intf.createShadowRoot) {\n                        self.parentDOMNode.appendChild(self.canvas);\n                    }\n                }\n                document.body.appendChild(self.controlInput);\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n            } else if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            self.applyDataTransforms();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            self.orderDirection = direction;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || c[0].sorter || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.orderings.add(columnName, direction, (typeof f === 'function' ? f : self.sorters.string));\n            self.orderings.sort();\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n  './component',\n  './defaults',\n  './draw',\n  './events',\n  './touch',\n  './intf',\n  './contextMenu',\n  './dom',\n  './publicMethods'\n], function context(component) {\n  'use strict';\n  component = component();\n  var modules = Array.prototype.slice.call(arguments);\n  function Grid(args) {\n    args = args || {};\n    var self = {};\n    self.isComponent = args.component === undefined;\n    self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n    if (self.isChildGrid) {\n      self.intf = {};\n    } else {\n      // self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n      // : document.createElement('canvas');\n      self.intf = self.isComponent ? null : document.createElement('canvas');\n    }\n    self.args = args;\n    self.intf.args = args;\n    self.applyComponentStyle = component.applyComponentStyle;\n    self.hyphenateProperty = component.hyphenateProperty;\n    self.dehyphenateProperty = component.dehyphenateProperty;\n    self.createGrid = function grid(args) {\n      args.component = false;\n      return new Grid(args);\n    };\n    modules.forEach(function (module) {\n      module(self);\n    });\n    if (self.isChildGrid) {\n      self.shadowRoot = args.parentNode.shadowRoot;\n      self.parentNode = args.parentNode;\n    } else if (self.intf.createShadowRoot) {\n      self.shadowRoot = self.intf.attachShadow({ mode: 'open' });\n      self.parentNode = self.shadowRoot;\n    } else {\n      self.parentNode = self.intf;\n    }\n    self.init();\n    return self.intf;\n  }\n  if (window.HTMLElement) {\n    Grid.prototype = Object.create(window.HTMLElement.prototype);\n  }\n  // export web component\n  if (window.customElements) {\n    Grid.observedAttributes = component.getObservableAttributes();\n    Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n    Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n    Grid.prototype.connectedCallback = component.connectedCallback;\n    Grid.prototype.adoptedCallback = component.adoptedCallback;\n    window.customElements.define('canvas-datagrid', Grid);\n  }\n  // export global\n  if (window && !window.canvasDatagrid && !window.require) {\n    window.canvasDatagrid = function (args) { return new Grid(args); };\n  }\n  // export amd loader\n  module.exports = function grid(args) {\n    args = args || {};\n    var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n      'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n    if (window.customElements && document.body.createShadowRoot) {\n      i = document.createElement('canvas-datagrid');\n      Object.keys(args).forEach(function (argKey) {\n        // set data and parentNode after everything else\n        if (argKey === 'data') { return; }\n        if (argKey === 'parentNode') { return; }\n        // top level keys in args\n        if (tKeys.indexOf(argKey) !== -1) {\n          tKeys.forEach(function (tKey) {\n            if (args[tKey] === undefined || tKey !== argKey) { return; }\n            if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n              if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                Object.keys(args[tKey]).forEach(function (sKey) {\n                  i[tKey][sKey] = args[tKey][sKey];\n                });\n              }\n            } else {\n              i[tKey] = args[tKey];\n            }\n          });\n          return;\n        }\n        // all others are attribute level keys\n        i.attributes[argKey] = args[argKey];\n      });\n      if (args.data) {\n        i.data = args.data;\n      }\n      // add to the dom very last to avoid redraws\n      if (args.parentNode) {\n        args.parentNode.appendChild(i);\n      }\n      return i;\n    }\n    args.component = false;\n    i = new Grid(args);\n    if (args.parentNode && args.parentNode.appendChild) {\n      args.parentNode.appendChild(i);\n    }\n    return i;\n  };\n  return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n  'use strict';\n  return function () {\n    var typeMap, component = {};\n    component.dehyphenateProperty = function hyphenateProperty(prop) {\n      prop = prop.replace('--cdg-', '');\n      var p = '', nextLetterCap;\n      Array.prototype.forEach.call(prop, function (char) {\n        if (nextLetterCap) {\n          nextLetterCap = false;\n          p += char.toUpperCase();\n          return;\n        }\n        if (char === '-') {\n          nextLetterCap = true;\n          return;\n        }\n        p += char;\n      });\n      return p;\n    };\n    component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n      var p = '';\n      Array.prototype.forEach.call(prop, function (char) {\n        if (char === char.toUpperCase()) {\n          p += '-' + char.toLowerCase();\n          return;\n        }\n        p += char;\n      });\n      return (cust ? '--cdg-' : '') + p;\n    };\n    function getDefaultItem(base, item) {\n      var i = {},\n        r;\n      defaults(i);\n      r = i.defaults[base].filter(function (i) {\n        return i[0].toLowerCase() === item.toLowerCase()\n          || component.hyphenateProperty(i[0]) === item.toLowerCase()\n          || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n      })[0];\n      return r;\n    }\n    component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n      if (!intf.isComponent) { return; }\n      var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n        defs = {};\n      intf.computedStyle = cStyle;\n      defaults(defs);\n      defs = defs.defaults.styles;\n      defs.forEach(function (def) {\n        var val;\n        val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n        if (val === \"\") {\n          val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n        }\n        if (val !== \"\" && typeof val === 'string') {\n          intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n            .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n        }\n      });\n      if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n        requestAnimationFrame(function () { intf.resize(true); });\n        intf.dispatchEvent('stylechanged', intf.style);\n      }\n    };\n    typeMap = {\n      data: function (strData) {\n        try {\n          return JSON.parse(strData);\n        } catch (e) {\n          throw new Error('Cannot read JSON data in canvas-datagrid data.');\n        }\n      },\n      schema: function (strSchema) {\n        try {\n          return JSON.parse(strSchema);\n        } catch (e) {\n          throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n        }\n      },\n      number: function (strNum, def) {\n        var n = parseInt(strNum, 10);\n        return isNaN(n) ? def : n;\n      },\n      boolean: function (strBool) {\n        return (/true/i).test(strBool);\n      },\n      string: function (str) {\n        return str;\n      }\n    };\n    component.getObservableAttributes = function () {\n      var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n      defaults(i);\n      i.defaults.attributes.forEach(function (attr) {\n        attrs.push(attr[0].toLowerCase());\n      });\n      return attrs;\n    };\n    component.disconnectedCallback = function () {\n      this.connected = false;\n    };\n    component.connectedCallback = function () {\n      var intf = this;\n      intf.parentDOMNode.innerHTML = \"\";\n      intf.parentDOMNode.appendChild(intf.canvas);\n      intf.connected = true;\n      component.observe(intf);\n      component.applyComponentStyle(true, intf);\n      intf.resize(true);\n    };\n    component.adoptedCallback = function () {\n      this.resize();\n    };\n    component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n      var tfn, intf = this, def;\n      if (attrName === 'style') {\n        component.applyComponentStyle(false, intf);\n        return;\n      }\n      if (attrName === 'data') {\n        if (intf.dataType === 'application/x-canvas-datagrid') {\n          intf.dataType = 'application/json+x-canvas-datagrid';\n        }\n        intf.args.data = newVal;\n        return;\n      }\n      if (attrName === 'schema') {\n        intf.args.schema = typeMap.schema(newVal);\n        return;\n      }\n      if (attrName === 'name') {\n        intf.name = newVal;\n        return;\n      }\n      if (attrName === 'class' || attrName === 'className') {\n        return;\n      }\n      def = getDefaultItem('attributes', attrName);\n      if (def) {\n        tfn = typeMap[typeof def[1]];\n        intf.attributes[def[0]] = tfn(newVal);\n        return;\n      }\n      if (/^on/.test(attrName)) {\n        intf.addEventListener('on' + attrName, function (e) {\n          // eval(newVal);\n        });\n      }\n      return;\n    };\n    component.observe = function (intf) {\n      var observer;\n      if (!window.MutationObserver) { return; }\n      intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n      /**\n       * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n       * @memberof canvasDatagrid\n       * @name applyComponentStyle\n       * @method\n       */\n      observer = new window.MutationObserver(function (mutations) {\n        var checkInnerHTML, checkStyle;\n        Array.prototype.forEach.call(mutations, function (mutation) {\n          if (mutation.attributeName === 'class'\n            || mutation.attributeName === 'style') {\n            checkStyle = true;\n            return;\n          }\n          if (mutation.target.nodeName === 'STYLE') {\n            checkStyle = true;\n            return;\n          }\n          if (mutation.target.parentNode\n            && mutation.target.parentNode.nodeName === 'STYLE') {\n            checkStyle = true;\n            return;\n          }\n          if (mutation.target === intf && (mutation.addedNodes.length > 0 || mutation.type === 'characterData')) {\n            checkInnerHTML = true;\n          }\n        });\n        if (checkStyle) {\n          intf.applyComponentStyle(false, intf);\n        }\n        if (checkInnerHTML) {\n          if (intf.dataType === 'application/x-canvas-datagrid') {\n            intf.dataType = 'application/json+x-canvas-datagrid';\n          }\n          intf.data = intf.innerHTML;\n        }\n      });\n      observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n      Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n        observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n      });\n    };\n    return component;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e, cell: self.currentCell})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var ev = {NativeEvent: e, column: column};\n                        if(self.dispatchEvent('copyonschema', ev)) {\n                            column = ev.column;\n                        }\n\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.orderings = {\n            columns: [],\n            add: function (orderBy, orderDirection, sortFunction) {\n                self.orderings.columns = self.orderings.columns.filter(function (col) {\n                    return col.orderBy !== orderBy;\n                });\n                self.orderings.columns.push({\n                    orderBy: orderBy,\n                    orderDirection: orderDirection,\n                    sortFunction: sortFunction\n                });\n            },\n            sort: function () {\n                self.orderings.columns.forEach(function (col) {\n                    self.data.sort(col.sortFunction(col.orderBy, col.orderDirection));\n                });\n            }\n        };\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.visibleCells = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.applyFilter = function () {\n            self.refreshFromOrigialData();\n            Object.keys(self.columnFilters).forEach(function (filter) {\n                var header = self.getHeaderByName(filter);\n                if (!header) {\n                    return;\n                }\n                self.currentFilter = header.filter || self.filter(header.type || 'string');\n                self.data = self.data.filter(function (row) {\n                    return self.currentFilter(row[filter], self.columnFilters[filter]);\n                });\n            });\n            self.resize();\n            self.draw(true);\n        };\n        self.applyDataTransforms = function () {\n            self.applyFilter();\n            self.orderings.sort();\n        }\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentDOMNode', {\n            get: function () {\n                return self.parentDOMNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.'));\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                // apply filter, sort, etc to incoming dataset\n                self.applyDataTransforms();\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    if (self.intf.createShadowRoot) {\n                        self.parentDOMNode.appendChild(self.canvas);\n                    }\n                }\n                document.body.appendChild(self.controlInput);\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n            } else if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            self.applyDataTransforms();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            self.orderDirection = direction;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || c[0].sorter || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.orderings.add(columnName, direction, (typeof f === 'function' ? f : self.sorters.string));\n            self.orderings.sort();\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}